import tkinter as tk
from tkinter import messagebox
import os

# File to store tasks
TASKS_FILE = 'tasks.txt'

class TodoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List Application")
        self.root.geometry("500x600")  # Set a fixed size for the window
        self.root.configure(bg="#f0f0f0")  # Light grey background

        self.tasks = self.load_tasks()

        self.create_widgets()

    def create_widgets(self):
        # Title Label
        self.title_label = tk.Label(self.root, text="To-Do List", font=("Arial", 24, "bold"), bg="#4a4a4a", fg="#ffffff")
        self.title_label.pack(pady=10, fill=tk.X)

        # Task Entry
        self.task_entry = tk.Entry(self.root, width=60, font=("Arial", 14), bg="#d0d0d0", fg="#000000", insertbackground='black')
        self.task_entry.pack(pady=5)

        # Add Button
        self.add_button = tk.Button(self.root, text="Add Task", command=self.add_task, bg="#4CAF50", fg="white", font=("Arial", 12))
        self.add_button.pack(pady=5)

        # Update Button
        self.update_button = tk.Button(self.root, text="Update Task", command=self.update_task, bg="#2196F3", fg="white", font=("Arial", 12))
        self.update_button.pack(pady=5)

        # Delete Button
        self.delete_button = tk.Button(self.root, text="Delete Task", command=self.delete_task, bg="#f44336", fg="white", font=("Arial", 12))
        self.delete_button.pack(pady=5)

        # Tasks Listbox
        self.tasks_listbox = tk.Listbox(self.root, width=80, height=20, font=("Arial", 12), bg="#ffffff", fg="#000000", selectbackground="#c5e1a5", selectforeground="#000000")
        self.tasks_listbox.pack(pady=10)
        self.refresh_tasks_listbox()

        # Configure root window to handle closing
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

    def add_task(self):
        description = self.task_entry.get().strip()
        if not description:
            messagebox.showwarning("Input Error", "Task description cannot be empty.")
            return

        task_id = len(self.tasks) + 1
        self.tasks[task_id] = {
            'description': description,
            'completed': False
        }
        self.save_tasks()
        self.refresh_tasks_listbox()
        self.task_entry.delete(0, tk.END)

    def update_task(self):
        selected_task_index = self.tasks_listbox.curselection()
        if not selected_task_index:
            messagebox.showwarning("Selection Error", "No task selected.")
            return

        task_id = list(self.tasks.keys())[selected_task_index[0]]
        description = self.task_entry.get().strip()

        if description:
            self.tasks[task_id]['description'] = description

        completed = messagebox.askyesno("Task Status", "Mark task as completed?")
        self.tasks[task_id]['completed'] = completed

        self.save_tasks()
        self.refresh_tasks_listbox()
        self.task_entry.delete(0, tk.END)

    def delete_task(self):
        selected_task_index = self.tasks_listbox.curselection()
        if not selected_task_index:
            messagebox.showwarning("Selection Error", "No task selected.")
            return

        task_id = list(self.tasks.keys())[selected_task_index[0]]
        del self.tasks[task_id]

        self.save_tasks()
        self.refresh_tasks_listbox()

    def refresh_tasks_listbox(self):
        self.tasks_listbox.delete(0, tk.END)
        for task_id, details in self.tasks.items():
            status = 'Completed' if details['completed'] else 'Pending'
            self.tasks_listbox.insert(tk.END, f"ID: {task_id} - {details['description']} - {status}")

    def load_tasks(self):
        tasks = {}
        if os.path.exists(TASKS_FILE):
            with open(TASKS_FILE, 'r') as file:
                for line in file:
                    parts = line.strip().split('|', 2)
                    if len(parts) == 3:
                        task_id, description, completed = parts
                        tasks[int(task_id)] = {
                            'description': description,
                            'completed': completed == 'True'
                        }
        return tasks

    def save_tasks(self):
        with open(TASKS_FILE, 'w') as file:
            for task_id, details in self.tasks.items():
                file.write(f"{task_id}|{details['description']}|{details['completed']}\n")

    def on_closing(self):
        self.save_tasks()
        self.root.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = TodoApp(root)
    root.mainloop()
